// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID       String   @id @default(uuid())
  email        String   @unique
  display_name String
  avatar       String?
  auth_provider String
  created_at   DateTime @default(now())

  memories     Memory[]
  reminders    Reminder[]
  reports      Report[]
}

model Emotion {
  emotionID String @id @default(uuid())
  name      String
  symbol    String

  memories  Memory[]
}

model Memory {
  memoryID    String   @id @default(uuid())
  userID      String
  emotionID   String
  title       String
  content     String
  created_at  DateTime @default(now())

  user        User     @relation(fields: [userID], references: [userID])
  emotion     Emotion  @relation(fields: [emotionID], references: [emotionID])
  media       Media[]
  shareLinks  ShareLink[]
  memoryTags  MemoryTag[]
}

model Media {
  mediaID    String   @id @default(uuid())
  memoryID   String
  url        String
  type       String
  caption    String?
  upload_at  DateTime @default(now())

  memory     Memory   @relation(fields: [memoryID], references: [memoryID])
}

model ShareLink {
  shareID         String   @id @default(uuid())
  memoryID        String
  access_level    String   // 'public' | 'private'
  expiration_date DateTime?
  url             String   // tokenized unique link

  memory          Memory   @relation(fields: [memoryID], references: [memoryID])
}

model Reminder {
  reminderID String   @id @default(uuid())
  userID     String
  message    String
  frequency  String
  time       DateTime

  user       User     @relation(fields: [userID], references: [userID])
}

model Report {
  reportID     String   @id @default(uuid())
  userID       String
  month        Int
  summary_text String

  user         User     @relation(fields: [userID], references: [userID])
}

model Tag {
  tagID      String       @id @default(uuid())
  name       String

  memoryTags MemoryTag[]
}

model MemoryTag {
  memoryID String
  tagID    String

  memory   Memory   @relation(fields: [memoryID], references: [memoryID])
  tag      Tag      @relation(fields: [tagID], references: [tagID])

  @@id([memoryID, tagID])
}